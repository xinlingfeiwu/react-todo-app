name: üöÄ Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: üìã Install dependencies
        run: npm ci

      - name: üîç Lint
        run: npm run lint

      - name: üèóÔ∏è Build
        run: npm run build:prod

      - name: üìù Generate Release Notes
        id: release_notes
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          # Ëé∑Âèñ‰∏ä‰∏Ä‰∏™Ê†áÁ≠æ
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          # Ëé∑ÂèñÊèê‰∫§ËÆ∞ÂΩï
          if [ -z "$PREV_TAG" ]; then
            COMMITS=$(git log --oneline --no-merges)
          else
            COMMITS=$(git log $PREV_TAG..HEAD --oneline --no-merges)
          fi
          
          # Ëé∑ÂèñË¥°ÁåÆËÄÖ‰ø°ÊÅØ
          if [ -z "$PREV_TAG" ]; then
            CONTRIBUTORS=$(git log --format='%an|%ae' | sort | uniq)
          else
            CONTRIBUTORS=$(git log $PREV_TAG..HEAD --format='%an|%ae' | sort | uniq)
          fi
          
          # ÂàùÂßãÂåñÂêÑÁ±ªÂà´ÂèòÊõ¥
          FEATURES=""
          FIXES=""
          DOCS=""
          REFACTORS=""
          PERFORMANCES=""
          TESTS=""
          CHORES=""
          OTHERS=""
          
          # Ëß£ÊûêÊèê‰∫§‰ø°ÊÅØÂπ∂ÂàÜÁ±ª
          while IFS= read -r line; do
            if [ -n "$line" ]; then
              # ÊèêÂèñÊèê‰∫§‰ø°ÊÅØÔºàÂéªÊéâÂìàÂ∏åÔºâ
              MSG=$(echo "$line" | sed 's/^[a-f0-9]* //')
          
              case "$MSG" in
                feat:*|feature:*)
                  FEATURES="$FEATURES\n‚Ä¢ ${MSG#*: }"
                  ;;
                fix:*|bugfix:*)
                  FIXES="$FIXES\n‚Ä¢ ${MSG#*: }"
                  ;;
                doc:*|docs:*)
                  DOCS="$DOCS\n‚Ä¢ ${MSG#*: }"
                  ;;
                style:*)
                  PERFORMANCES="$PERFORMANCES\n‚Ä¢ ${MSG#*: }"
                  ;;
                refactor:*)
                  REFACTORS="$REFACTORS\n‚Ä¢ ${MSG#*: }"
                  ;;
                perf:*|performance:*)
                  PERFORMANCES="$PERFORMANCES\n‚Ä¢ ${MSG#*: }"
                  ;;
                test:*|tests:*)
                  TESTS="$TESTS\n‚Ä¢ ${MSG#*: }"
                  ;;
                chore:*|build:*|ci:*)
                  CHORES="$CHORES\n‚Ä¢ ${MSG#*: }"
                  ;;
                *)
                  OTHERS="$OTHERS\n‚Ä¢ $MSG"
                  ;;
              esac
            fi
          done <<< "$COMMITS"
          
          # ÊûÑÂª∫ÂàÜÁ±ªÁöÑÊõ¥Êñ∞ÂÜÖÂÆπ
          CHANGELOG=""
          
          if [ -n "$FEATURES" ]; then
            CHANGELOG="$CHANGELOG\n\n#### ‚ú® Êñ∞ÂäüËÉΩ$FEATURES"
          fi
          
          if [ -n "$FIXES" ]; then
            CHANGELOG="$CHANGELOG\n\n#### üêõ ÈóÆÈ¢ò‰øÆÂ§ç$FIXES"
          fi
          
          if [ -n "$PERFORMANCES" ]; then
            CHANGELOG="$CHANGELOG\n\n#### ‚ö° ÊÄßËÉΩ‰ºòÂåñ‰∏éÊ†∑ÂºèÊõ¥Êñ∞$PERFORMANCES"
          fi
          
          if [ -n "$REFACTORS" ]; then
            CHANGELOG="$CHANGELOG\n\n#### ‚ôªÔ∏è ‰ª£Á†ÅÈáçÊûÑ$REFACTORS"
          fi
          
          if [ -n "$DOCS" ]; then
            CHANGELOG="$CHANGELOG\n\n#### üìö ÊñáÊ°£Êõ¥Êñ∞$DOCS"
          fi
          
          if [ -n "$TESTS" ]; then
            CHANGELOG="$CHANGELOG\n\n#### üß™ ÊµãËØïÁõ∏ÂÖ≥$TESTS"
          fi
          
          if [ -n "$CHORES" ]; then
            CHANGELOG="$CHANGELOG\n\n#### üîß ÊûÑÂª∫/Â∑•ÂÖ∑$CHORES"
          fi
          
          if [ -n "$OTHERS" ]; then
            CHANGELOG="$CHANGELOG\n\n#### üìù ÂÖ∂‰ªñÊõ¥Êñ∞$OTHERS"
          fi
          
          # Â¶ÇÊûúÊ≤°ÊúâÂàÜÁ±ªÂÜÖÂÆπÔºå‰ΩøÁî®ÈªòËÆ§‰ø°ÊÅØ
          if [ -z "$CHANGELOG" ]; then
            CHANGELOG="\n‚Ä¢ ÁâàÊú¨Êõ¥Êñ∞Âíå‰ºòÂåñ"
          fi
          
          # ÊûÑÂª∫Ë¥°ÁåÆËÄÖ‰ø°ÊÅØ
          CONTRIBUTORS_SECTION=""
          if [ -n "$CONTRIBUTORS" ]; then
            CONTRIBUTORS_SECTION="\n\n#### ‚ù§Ô∏è Thank You\nÊÑüË∞¢‰ª•‰∏ãË¥°ÁåÆËÄÖÁöÑËæõÂã§‰ªòÂá∫Ôºö\n"
            while IFS='|' read -r name email; do
              if [ -n "$name" ] && [ -n "$email" ]; then
                # ‰ªéÈÇÆÁÆ±ÊèêÂèñ GitHub Áî®Êà∑ÂêçÔºàÁÆÄÂçïÂ§ÑÁêÜÔºåÂÆûÈôÖÂèØËÉΩÈúÄË¶ÅÊõ¥Â§çÊùÇÁöÑÈÄªËæëÔºâ
                github_user=$(echo "$email" | sed 's/@.*//')
                CONTRIBUTORS_SECTION="$CONTRIBUTORS_SECTION\n‚Ä¢ [@$github_user](https://github.com/$github_user)"
              fi
            done <<< "$CONTRIBUTORS"
          fi
          
          # ÊûÑÂª∫ÂèëÂ∏ÉËØ¥Êòé
          cat > release_notes.md << EOF
          ## üéâ ÁâàÊú¨ $VERSION
          
          ### üìù Êú¨Ê¨°Êõ¥Êñ∞$CHANGELOG$CONTRIBUTORS_SECTION
          
          ### üì¶ ‰ΩøÁî®ÊñπÂºè
          \`\`\`bash
          # ÂÖãÈöÜÈ°πÁõÆ
          git clone https://github.com/xinlingfeiwu/react-todo-app.git
          cd react-todo-app
          
          # ÂÆâË£Ö‰æùËµñ
          npm install
          
          # ÂêØÂä®ÂºÄÂèëÊúçÂä°Âô®
          npm run dev
          
          # ÊûÑÂª∫Áîü‰∫ßÁâàÊú¨
          npm run build:prod
          \`\`\`
          
          ### üåê Âú®Á∫ø‰ΩìÈ™å
          ËÆøÈóÆ [GitHub Pages](https://xinlingfeiwu.github.io/react-todo-app/) Á´ãÂç≥‰ΩìÈ™å
          
          ### üìä È°πÁõÆ‰ø°ÊÅØ
          ‚Ä¢ **ÁâàÊú¨**: $VERSION
          ‚Ä¢ **ÊûÑÂª∫Êó∂Èó¥**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          ‚Ä¢ **Êèê‰∫§ÂìàÂ∏å**: $(git rev-parse --short HEAD)
          ‚Ä¢ **‰∏ãËΩΩ**: [Ê∫êÁ†ÅÂåÖ](https://github.com/xinlingfeiwu/react-todo-app/archive/refs/tags/$VERSION.tar.gz)
          EOF

      - name: üöÄ Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.release_notes.outputs.version }}
          release_name: ${{ steps.release_notes.outputs.version }}
          body_path: release_notes.md
          draft: false
          prerelease: false

      - name: üåê Deploy to GitHub Pages
        uses: actions/deploy-pages@v4
        with:
          artifact_name: github-pages

      - name: üì§ Upload Build Artifacts
        uses: actions/upload-pages-artifact@v3
        with:
          path: dist

  deploy-pages:
    needs: release
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: üåê Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
